describe '<%= resource_type %> search by <%= search_params.keys.join('+') %> test' do
  before do
    @test = @sequence_class[:<%= test_key %>]
    @sequence = @sequence_class.new(@instance, @client)
    @<%= resource_var_name %> = FHIR::from_contents(load_fixture(:<%= sequence_name %>))
    @<%= resource_var_name %>_ary = [@<%= resource_var_name %>]
    @sequence.instance_variable_set(:'@<%= resource_var_name %>', @<%= resource_var_name %>)
    @sequence.instance_variable_set(:'@<%= resource_var_name %>_ary', @<%= resource_var_name %>_ary)
    @query = {
      <%= search_param_string %>
    }
  end

  it 'fails if a non-success response code is received' do
<% if is_first_search && is_fixed_value_search %>
    [<%= fixed_value_search_string %>].each do |value|
      query_params = {
        'patient': @instance.patient_id,
        '<%= fixed_value_search_param %>': value
      }
      stub_request(:get, "#{@base_url}/<%= resource_type %>")
        .with(query: query_params, headers: @auth_header)
        .to_return(status: 401)
    end
<% else %>
    stub_request(:get, "#{@base_url}/<%= resource_type %>")
      .with(query: @query, headers: @auth_header)
      .to_return(status: 401)
<% end %>

    exception = assert_raises(Inferno::AssertionException) { @sequence.run_test(@test) }

    assert_equal 'Bad response code: expected 200, 201, but found 401. ', exception.message
  end

  it 'fails if a Bundle is not received' do
<% if is_first_search && is_fixed_value_search %>
    [<%= fixed_value_search_string %>].each do |value|
      query_params = {
        'patient': @instance.patient_id,
        '<%= fixed_value_search_param %>': value
      }
      stub_request(:get, "#{@base_url}/<%= resource_type %>")
        .with(query: query_params, headers: @auth_header)
        .to_return(status: 200, body: FHIR::<%= resource_type %>.new.to_json)
    end
<% else %>
    stub_request(:get, "#{@base_url}/<%= resource_type %>")
      .with(query: @query, headers: @auth_header)
      .to_return(status: 200, body: FHIR::<%= resource_type %>.new.to_json)
<% end %>

    exception = assert_raises(Inferno::AssertionException) { @sequence.run_test(@test) }

    assert_equal 'Expected FHIR Bundle but found: <%= resource_type %>', exception.message
  end

  it 'skips if an empty Bundle is received' do
<% if is_first_search && is_fixed_value_search %>
    [<%= fixed_value_search_string %>].each do |value|
      query_params = {
        'patient': @instance.patient_id,
        '<%= fixed_value_search_param %>': value
      }
      stub_request(:get, "#{@base_url}/<%= resource_type %>")
        .with(query: query_params, headers: @auth_header)
        .to_return(status: 200, body: FHIR::Bundle.new.to_json)
    end
<% else %>
    stub_request(:get, "#{@base_url}/<%= resource_type %>")
      .with(query: @query, headers: @auth_header)
      .to_return(status: 200, body: FHIR::Bundle.new.to_json)
<% end %>

    exception = assert_raises(Inferno::SkipException) { @sequence.run_test(@test) }

    assert_equal 'No resources appear to be available for this patient. Please use patients with more information.', exception.message
  end

  it 'fails if the bundle contains a resource which does not conform to the base FHIR spec' do
<% if is_first_search && is_fixed_value_search %>
    [<%= fixed_value_search_string %>].each do |value|
      query_params = {
        'patient': @instance.patient_id,
        '<%= fixed_value_search_param %>': value
      }
      stub_request(:get, "#{@base_url}/<%= resource_type %>")
        .with(query: query_params, headers: @auth_header)
        .to_return(status: 200, body: wrap_resources_in_bundle(FHIR::<%= resource_type %>.new(id: '!@#$%')).to_json)
    end
<% else %>
    stub_request(:get, "#{@base_url}/<%= resource_type %>")
      .with(query: @query, headers: @auth_header)
      .to_return(status: 200, body: wrap_resources_in_bundle(FHIR::<%= resource_type %>.new(id: '!@#$%')).to_json)
<% end %>

    exception = assert_raises(Inferno::AssertionException) { @sequence.run_test(@test) }

    assert exception.message.start_with? 'Invalid <%= resource_type %>:'
  end

  <% unless has_comparator_tests %>
    it 'succeeds when a bundle containing a valid resource matching the search parameters is returned' do
    <% if is_first_search && is_fixed_value_search %>
      [<%= fixed_value_search_string %>].each do |value|
        query_params = {
          'patient': @instance.patient_id,
          '<%= fixed_value_search_param %>': value
        }
      body = @<%= resource_var_name %>.<%= fixed_value_search_param %> == value ? wrap_resources_in_bundle(@<%= resource_var_name %>_ary).to_json : FHIR::Bundle.new.to_json
        stub_request(:get, "#{@base_url}/<%= resource_type %>")
          .with(query: query_params, headers: @auth_header)
          .to_return(status: 200, body: body)
      end
    <% else %>
      stub_request(:get, "#{@base_url}/<%= resource_type %>")
        .with(query: @query, headers: @auth_header)
        .to_return(status: 200, body: wrap_resources_in_bundle(@<%= resource_var_name %>_ary).to_json)
    <% end %>

      @sequence.run_test(@test)
    end
  <% end %>
end
